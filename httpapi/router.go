package httpapi

import (
	sentryecho "github.com/getsentry/sentry-go/echo"
	"github.com/labstack/echo/v4"
	"github.com/nexuslab-dev/nexus-lbs/core"
	_ "github.com/nexuslab-dev/nexus-lbs/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/nexuslab-dev/nexus-lbs/httpapi/middleware"
	"github.com/nexuslab-dev/nexus-lbs/httpapi/v1"
	"github.com/prometheus/common/version"
	echoswagger "github.com/swaggo/echo-swagger"
	"net"
	"net/http"
	"strings"
)

func Register(e *echo.Echo, serviceName string, countryQuery, cityQuery *core.GeoQuery) {
	e.Use(sentryecho.New(sentryecho.Options{Repanic: true}))

	// user IPExtractor
	e.IPExtractor = clientRealIpExtractor

	e.Use(sentryecho.New(sentryecho.Options{Repanic: true}))
	e.Use(middleware.NewServerNameHeader(serviceName, version.Version))

	e.GET("/swagger/*", echoswagger.WrapHandler)

	e.GET("/version", func(c echo.Context) error {
		return c.HTML(http.StatusOK, version.Print(serviceName))
	})

	v1api := e.Group("/v1/api/")

	ipGeo := v1.New(countryQuery, cityQuery)
	v1api.GET("city/:ip", ipGeo.CityHandler)
	v1api.GET("country/:ip", ipGeo.CountryHandler)
}

const (
	HeaderCFConnectingIP = "CF-Connecting-IP"
	HeaderAliRealIP      = "ali-cdn-real-ip"
)

func clientRealIpExtractor(request *http.Request) string {
	if ip := request.Header.Get(HeaderCFConnectingIP); ip != "" {
		return ip
	}
	if ip := request.Header.Get(HeaderAliRealIP); ip != "" {
		return ip
	}
	if ip := request.Header.Get(echo.HeaderXRealIP); ip != "" {
		return ip
	}
	// Fall back to legacy behavior
	if ips := strings.Split(request.Header.Get(echo.HeaderXForwardedFor), ", "); len(ips) > 0 {
		return ips[0]
	}
	ra, _, _ := net.SplitHostPort(request.RemoteAddr)
	return ra
}
